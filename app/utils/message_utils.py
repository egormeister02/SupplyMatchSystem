"""
Utility functions for message operations
"""

from aiogram import types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError
from app.utils.queue_worker import refill_queue_for_users_with_few_jokes
import logging

logger = logging.getLogger(__name__)

async def send_joke_message(message: types.Message, joke_text: str, users_jokes_id: int | None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫, —Å–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –∏ —Å–ª–µ–¥—É—é—â–∏–π.
    """

    logger.debug(f"Sending joke message: users_jokes_id={users_jokes_id}, joke_text='{joke_text[:50]}...'")
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
    await refill_queue_for_users_with_few_jokes()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã
    if users_jokes_id is not None and (not isinstance(users_jokes_id, int) or users_jokes_id <= 0):
        logger.error(f"Invalid users_jokes_id type in send_joke_message: {type(users_jokes_id)}, value: {users_jokes_id}")
        users_jokes_id = None
    
    formatted_message = f"{joke_text}"
    sent_message = await message.answer(formatted_message)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "full"
    keyboard = await create_dynamic_keyboard(users_jokes_id, sent_message.message_id, "full")
    await sent_message.edit_reply_markup(reply_markup=keyboard)

async def remove_keyboard_from_message(bot: Bot, chat_id: int, message_id: int) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Args:
        bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
        chat_id (int): ID —á–∞—Ç–∞
        message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
    """
    try:
        await bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=None
        )
        return True
    except TelegramAPIError as e:
        logger.error(f"Error removing keyboard from message {message_id}: {e}")
        return False

async def edit_message_with_reaction(bot: Bot, chat_id: int, message_id: int, joke_text: str, reaction: str, reply_markup: InlineKeyboardMarkup = None) -> bool:
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –ø–æ–º–µ—Ç–∫—É –æ —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        bot (Bot): –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
        chat_id (int): ID —á–∞—Ç–∞
        message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è
        joke_text (str): –¢–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç–∞
        reaction (str): –†–µ–∞–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('like', 'dislike' –∏–ª–∏ 'none')
        reply_markup (InlineKeyboardMarkup, optional): –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∂–∏ –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏
    if reaction == 'like':
        reaction_emoji = "üëç"
    elif reaction == 'dislike':
        reaction_emoji = "üëé"
    else:
        reaction_emoji = ""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if reaction_emoji:
        formatted_message = f"{joke_text}\n\n{reaction_emoji}"
    else:
        formatted_message = joke_text

    # 1) –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=formatted_message
        )
    except TelegramAPIError as e:
        text_err = str(e).lower()
        if "message is not modified" in text_err:
            # –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–∞—Å ‚Äî —Ç–µ–∫—Å—Ç —É–∂–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            logger.debug(f"Message {message_id} text not modified (already up to date)")
        else:
            logger.error(f"Error editing message {message_id} text: {e}")
            return False

    # 2) –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω reply_markup, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if reply_markup is not None:
        try:
            await bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=reply_markup
            )
        except TelegramAPIError as e:
            markup_err = str(e).lower()
            if "message is not modified" in markup_err:
                logger.debug(f"Message {message_id} markup not modified (already up to date)")
            else:
                logger.error(f"Error editing message {message_id} markup: {e}")
                return False

    return True

async def create_dynamic_keyboard(
    users_jokes_id: int | None,
    message_id: int,
    current_state: str = "full" # "full", "reaction_only", "nav_only", "none"
) -> InlineKeyboardMarkup | None:
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫.
    
    Args:
        users_jokes_id (int | None): ID –∑–∞–ø–∏—Å–∏ –≤ users_jokes. –ú–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —à—É—Ç–∫–∏.
        message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è.
        current_state (str): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ("full", "reaction_only", "nav_only", "none").
        
    Returns:
        InlineKeyboardMarkup | None: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç.
    """
    logger.debug(f"Creating dynamic keyboard: users_jokes_id={users_jokes_id}, message_id={message_id}, current_state={current_state}")
    
    keyboard_rows = []
    
    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å users_jokes_id –∏ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if users_jokes_id is not None and current_state in ["full", "reaction_only"]:
        reaction_suffix = "reaction_full" if current_state == "full" else "reaction_only"
        like_callback = f"like_{users_jokes_id}_{message_id}_{reaction_suffix}"
        dislike_callback = f"dislike_{users_jokes_id}_{message_id}_{reaction_suffix}"
        keyboard_rows.append([
            InlineKeyboardButton(
                text="üëç",
                callback_data=like_callback
            ),
            InlineKeyboardButton(
                text="üëé",
                callback_data=dislike_callback
            )
        ])
        logger.debug(f"Added reaction buttons with suffix: {reaction_suffix}")
        logger.debug(f"Like callback_data: {like_callback}")
        logger.debug(f"Dislike callback_data: {dislike_callback}")
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –µ—Å—Ç—å users_jokes_id
    if current_state in ["full", "nav_only"]:
        nav_suffix = "nav_full" if current_state == "full" else "nav_only"
        change_topic_callback = f"change_topic_{users_jokes_id}_{message_id}_{nav_suffix}"
        next_joke_callback = f"next_joke_{users_jokes_id}_{message_id}_{nav_suffix}"
        keyboard_rows.append([ 
            InlineKeyboardButton(
                text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É",
                callback_data=change_topic_callback
            ),
            InlineKeyboardButton(
                text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π",
                callback_data=next_joke_callback
            )
        ]) 
        logger.debug(f"Added navigation buttons with suffix: {nav_suffix}")
        logger.debug(f"Change topic callback_data: {change_topic_callback}")
        logger.debug(f"Next joke callback_data: {next_joke_callback}")
    
    if not keyboard_rows:
        logger.debug("No buttons needed; returning None for reply_markup")
        return None

    logger.debug(f"Created keyboard with {len(keyboard_rows)} rows")
    return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
