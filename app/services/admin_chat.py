"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import logging
import json
import os
from typing import Optional, List, Union, Dict, Any
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types.input_file import FSInputFile
from app.config import config
from app.services.local_storage import local_storage_service

logger = logging.getLogger(__name__)

class AdminChatService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–æ–≤—ã–º —á–∞—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        """
        self.admin_chat_id = config.ADMIN_GROUP_CHAT_ID
    
    @staticmethod
    async def send_message(
        bot: Bot, 
        text: str, 
        reply_markup: Optional[InlineKeyboardMarkup] = None,
        photo: Optional[str] = None,
        document: Optional[str] = None,
        video: Optional[str] = None,
    ) -> Optional[int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        
        Args:
            bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
            photo: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ
            document: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
            video: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
            
        Returns:
            ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not config.ADMIN_GROUP_CHAT_ID:
            logger.error("ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
            
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if photo:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
                if os.path.exists(str(photo)):
                    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile
                    message = await bot.send_photo(
                        chat_id=config.ADMIN_GROUP_CHAT_ID,
                        photo=FSInputFile(photo),
                        caption=text,
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )
                else:
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ URL –∏–ª–∏ ID —Ñ–∞–π–ª–∞
                    message = await bot.send_photo(
                        chat_id=config.ADMIN_GROUP_CHAT_ID,
                        photo=photo,
                        caption=text,
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )
            elif document:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
                if os.path.exists(str(document)):
                    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile
                    message = await bot.send_document(
                        chat_id=config.ADMIN_GROUP_CHAT_ID,
                        document=FSInputFile(document),
                        caption=text,
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )
                else:
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ URL –∏–ª–∏ ID —Ñ–∞–π–ª–∞
                    message = await bot.send_document(
                        chat_id=config.ADMIN_GROUP_CHAT_ID,
                        document=document,
                        caption=text,
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )
            elif video:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
                if os.path.exists(str(video)):
                    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile
                    message = await bot.send_video(
                        chat_id=config.ADMIN_GROUP_CHAT_ID,
                        video=FSInputFile(video),
                        caption=text,
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )
                else:
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ URL –∏–ª–∏ ID —Ñ–∞–π–ª–∞
                    message = await bot.send_video(
                        chat_id=config.ADMIN_GROUP_CHAT_ID,
                        video=video,
                        caption=text,
                        reply_markup=reply_markup,
                        parse_mode="HTML"
                    )
            else:
                message = await bot.send_message(
                    chat_id=config.ADMIN_GROUP_CHAT_ID,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
                
            return message.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {str(e)}")
            return None
    
    def create_admin_callback_data(self, action: str, **kwargs) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç callback_data –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
        :param action: –î–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, approve_supplier, reject_supplier)
        :param kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, supplier_id, request_id)
        :return: Encoded callback data
        """
        data = {"action": action, **kwargs}
        callback_data = f"admin:{action}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ callback_data
        for key, value in kwargs.items():
            callback_data += f":{key}={value}"
        
        return callback_data
    
    def parse_admin_callback_data(self, callback_data: str) -> Dict[str, str]:
        """
        –ü–∞—Ä—Å–∏—Ç callback_data –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ admin:action:key1=value1:key2=value2
        
        :param callback_data: –°—Ç—Ä–æ–∫–∞ callback_data
        :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–µ–π—Å—Ç–≤–∏–µ–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        result = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_data –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "admin:"
        if not callback_data.startswith("admin:"):
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")
            return result
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        parts = callback_data.split(":")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "admin" –∏ –ø–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if len(parts) > 1:
            result["action"] = parts[1]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        for i in range(2, len(parts)):
            try:
                key, value = parts[i].split("=")
                result[key] = value
            except ValueError:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ callback_data: {parts[i]}")
        
        return result
    
    @staticmethod
    async def notify_admins(
        bot: Bot, 
        title: str, 
        message: str, 
        user_id: Optional[int] = None,
        username: Optional[str] = None,
        action_buttons: Optional[List[Dict[str, str]]] = None
    ) -> Optional[int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        
        Args:
            bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
            username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            action_buttons: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ 
                             [{"text": "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏", "callback_data": "admin:action:param=value"}]
                             
        Returns:
            ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        text = f"üì¢ <b>{title}</b>\n\n"
        
        if user_id:
            text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}"
            if username:
                text += f" ({username})"
            text += "\n\n"
            
        text += message
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        markup = None
        if action_buttons and len(action_buttons) > 0:
            keyboard = []
            
            # –°–æ–∑–¥–∞–µ–º —Ä—è–¥—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏, –º–∞–∫—Å–∏–º—É–º 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            row = []
            for button in action_buttons:
                if len(row) == 2:
                    keyboard.append(row)
                    row = []
                
                row.append(InlineKeyboardButton(
                    text=button["text"],
                    callback_data=button["callback_data"]
                ))
                
            if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
                keyboard.append(row)
                
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        return await AdminChatService.send_message(bot, text, reply_markup=markup)
    
    async def send_action_result_to_admin(self, bot: Bot, admin_id: int, text: str, supplier_id: Optional[int] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        
        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        :param supplier_id: ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        :return: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            message_text = f"üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–ï\n\n{text}"
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if supplier_id:
                message_text += f"\n\nID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_id}"
            
            await bot.send_message(
                chat_id=admin_id,
                text=message_text,
                parse_mode="HTML"
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            return False

    async def notify_admins(self, text: str, keyboard: Optional[InlineKeyboardMarkup] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
        
        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        :param keyboard: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        :return: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        if not self.admin_chat_id:
            logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False
        
        try:
            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Bot, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è 
            # –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
            # –ó–¥–µ—Å—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Bot, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞: {text[:100]}...")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")
            return False
    
    async def send_supplier_to_admin_chat(self, bot: Bot, supplier_id: int, supplier_data: Dict[str, Any], **kwargs) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–±—Ä–∞—Ç—å —Å–µ–±–µ"
        
        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        :param supplier_id: ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        :param supplier_data: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        :param kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        :return: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if not self.admin_chat_id:
            logger.error("ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ADMIN_GROUP_CHAT_ID) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
            logger.error("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /chatid –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID")
            return False
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ {supplier_id} –≤ —á–∞—Ç {self.admin_chat_id}")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
            company_name = supplier_data.get('company_name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            product_name = supplier_data.get('product_name', "")
            category = supplier_data.get('category_name', "")
            subcategory = supplier_data.get('subcategory_name', "")
            description = supplier_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            photos = supplier_data.get('photos', [])
            
            message_text = (
                f"üìã –ù–û–í–´–ô –ü–û–°–¢–ê–í–©–ò–ö\n\n"
                f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n"
                f"üîç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"üîç –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}\n"
                f"üîç –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description[:200]}{'...' if len(description) > 200 else ''}"
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ
            photo_path = None
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç
            if photos and len(photos) > 0:
                first_photo = photos[0]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
                if isinstance(first_photo, dict):
                    if 'storage_path' in first_photo:
                        photo_path = first_photo['storage_path']
                    elif 'file_path' in first_photo:
                        photo_path = first_photo['file_path']
                else:
                    photo_path = first_photo
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–±—Ä–∞—Ç—å —Å–µ–±–µ"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üì• –ó–∞–±—Ä–∞—Ç—å —Å–µ–±–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", 
                            callback_data=self.create_admin_callback_data(
                                "take_supplier", 
                                supplier_id=supplier_id
                            )
                        )
                    ]
                ]
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            input_photo = None
            if photo_path:
                try:
                    # –ï—Å–ª–∏ –ø—É—Ç—å —è–≤–ª—è–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ñ–∞–π–ª–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    if os.path.exists(str(photo_path)):
                        input_photo = FSInputFile(photo_path)
                    else:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–µ–Ω–∏—è
                        full_path = await local_storage_service.get_file_path(str(photo_path))
                        if full_path and os.path.exists(full_path):
                            input_photo = FSInputFile(full_path)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ URL
                            input_photo = photo_path
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    input_photo = None
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
            try:
                if input_photo:
                    message = await bot.send_photo(
                        chat_id=self.admin_chat_id,
                        photo=input_photo,
                        caption=message_text,
                        reply_markup=keyboard
                    )
                else:
                    message = await bot.send_message(
                        chat_id=self.admin_chat_id,
                        text=message_text,
                        reply_markup=keyboard
                    )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ {supplier_id} –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
                return True
                
            except Exception as send_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
                
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å
                if input_photo:
                    try:
                        await bot.send_message(
                            chat_id=self.admin_chat_id,
                            text=message_text,
                            reply_markup=keyboard
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ {supplier_id} (–±–µ–∑ —Ñ–æ—Ç–æ)")
                        return True
                    except Exception as text_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text_error}")
                        return False
                else:
                    return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return False

    async def send_request_to_admin_chat(self, bot: Bot, request_id: int, request_data: Dict[str, Any], **kwargs) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        """
        try:
            if not self.admin_chat_id:
                logger.error("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –∑–∞–¥–∞–Ω")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏
            category_id = request_data.get("category_id")
            category_name = request_data.get("category_name", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
            created_at = request_data.get("created_at")
            created_at_str = ""
            if created_at:
                if isinstance(created_at, str):
                    try:
                        from datetime import datetime
                        created_at_dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        created_at_str = created_at_dt.strftime('%d.%m.%Y %H:%M')
                    except:
                        created_at_str = created_at
                else:
                    created_at_str = str(created_at)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞—è–≤–∫–∏
            message_text = f"üìù <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}</b>\n\n"
            
            message_text += f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            description = request_data.get("description", "").strip()
            if description:
                message_text += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            contact_info = request_data.get("contact_info", "").strip()
            if contact_info:
                message_text += f"<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n{contact_info}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            if created_at_str:
                message_text += f"<b>–°–æ–∑–¥–∞–Ω–æ:</b> {created_at_str}\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –∑–∞—è–≤–∫–∏
            photos = request_data.get("photos", [])
            video = request_data.get("video")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–±—Ä–∞—Ç—å —Å–µ–±–µ"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üì• –ó–∞–±—Ä–∞—Ç—å —Å–µ–±–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", 
                            callback_data=self.create_admin_callback_data(
                                "take_request", 
                                request_id=request_id
                            )
                        )
                    ]
                ]
            )

            try:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º
                if photos and len(photos) > 0:
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
                    photo_path = None
                    first_photo = photos[0]
                    
                    if isinstance(first_photo, dict):
                        if 'file_path' in first_photo:
                            photo_path = first_photo['file_path']
                        elif 'storage_path' in first_photo:
                            photo_path = first_photo['storage_path']
                    
                    if photo_path:
                        try:
                            full_path = await local_storage_service.get_file_path(str(photo_path))
                            if full_path and os.path.exists(full_path):
                                await bot.send_photo(
                                    chat_id=self.admin_chat_id,
                                    photo=FSInputFile(full_path),
                                    caption=message_text,
                                    reply_markup=keyboard,
                                    parse_mode="HTML"
                                )
                                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ –∑–∞—è–≤–∫–µ {request_id}")
                                return True
                        except Exception as photo_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ: {photo_error}")
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await bot.send_message(
                    chat_id=self.admin_chat_id,
                    text=message_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ {request_id}")
                return True
            except Exception as text_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text_error}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
admin_chat_service = AdminChatService()
