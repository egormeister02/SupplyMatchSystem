"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
"""

import logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command as CommandFilter

from app.services import get_db_session, DBService, admin_chat_service
from app.utils.message_utils import send_supplier_card
from app.config import config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
class AdminStates(StatesGroup):
    waiting_rejection_reason = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—à–µ–ª –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
async def admin_chat_filter(callback: CallbackQuery) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ callback –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—à–µ–ª –∏–∑ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    if not config.ADMIN_GROUP_CHAT_ID:
        return False
    
    return callback.message.chat.id == config.ADMIN_GROUP_CHAT_ID

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def admin_user_filter(message_or_callback) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    user_id = message_or_callback.from_user.id
    admin_ids = []
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ADMIN_IDS –≤ —Å–ø–∏—Å–æ–∫ int –∑–Ω–∞—á–µ–Ω–∏–π
    if isinstance(config.ADMIN_IDS, str) and config.ADMIN_IDS:
        admin_ids = [int(admin_id) for admin_id in config.ADMIN_IDS.split(',') if admin_id.strip()]
    elif isinstance(config.ADMIN_IDS, list):
        admin_ids = [int(admin_id) for admin_id in config.ADMIN_IDS if str(admin_id).strip()]
    
    return user_id in admin_ids

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–∞—Ç—å —Å–µ–±–µ" –≤ –æ–±—â–µ–º —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.callback_query(F.data.startswith("admin:take_supplier"), admin_chat_filter)
async def take_supplier(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–∞—Ç—å —Å–µ–±–µ" –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    await callback.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    data = admin_chat_service.parse_admin_callback_data(callback.data)
    supplier_id = data.get("supplier_id")
    
    if not supplier_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–¥–º–∏–Ω–µ
    admin_id = callback.from_user.id
    admin_username = callback.from_user.username or f"ID:{admin_id}"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
        supplier_data = await DBService.get_supplier_by_id_static(int(supplier_id))
        if not supplier_data:
            await callback.message.answer(f"–û—à–∏–±–∫–∞: –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Å ID {supplier_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(supplier_data=supplier_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ verified_by_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            async with get_db_session() as session:
                db_service = DBService(session)
                update_query = """
                    UPDATE suppliers 
                    SET verified_by_id = :admin_id 
                    WHERE id = :supplier_id
                """
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º supplier_id –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                supplier_id_int = int(supplier_id)
                await db_service.execute_query(update_query, {"admin_id": admin_id, "supplier_id": supplier_id_int})
                await db_service.commit()
                logger.info(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è verified_by_id: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è - –∏–º–µ–µ—Ç –ª–∏ –æ–Ω–æ caption (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥.) –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        if hasattr(callback.message, 'caption') and callback.message.caption is not None:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption –¥–ª—è –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                await callback.message.edit_caption(
                    caption=(callback.message.caption or "") + f"\n\nüîÑ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_username}",
                    reply_markup=None
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(f"üîÑ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_username}")
        else:
            # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            try:
                await callback.message.edit_text(
                    text=callback.message.text + f"\n\nüîÑ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_username}",
                    reply_markup=None
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(f"üîÑ –ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_username}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
            inline_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                            callback_data=admin_chat_service.create_admin_callback_data(
                                "approve_supplier", 
                                supplier_id=supplier_id
                            )
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                            callback_data=admin_chat_service.create_admin_callback_data(
                                "reject_supplier", 
                                supplier_id=supplier_id
                            )
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                            callback_data=admin_chat_service.create_admin_callback_data(
                                "edit_supplier", 
                                supplier_id=supplier_id
                            )
                        )
                    ]
                ]
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ send_supplier_card
            await send_supplier_card(
                bot=bot,
                chat_id=admin_id,
                supplier=supplier_data,
                keyboard=inline_keyboard,
                include_video=True  # –í–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ
            )
            
            logger.info(f"–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id} –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            await callback.message.answer(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_username}. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data.startswith("admin:approve_supplier"))
async def handle_approve_supplier(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    await callback.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    data = admin_chat_service.parse_admin_callback_data(callback.data)
    supplier_id = data.get("supplier_id")
    
    if not supplier_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        supplier_data = state_data.get("supplier_data")
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not supplier_data:
            supplier_data = await DBService.get_supplier_by_id_static(int(supplier_id))
            if not supplier_data:
                await callback.message.answer(f"–û—à–∏–±–∫–∞: –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Å ID {supplier_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        await DBService.update_supplier_status(int(supplier_id), "approved")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        logger.info(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier_id} –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        user_id = supplier_data.get("created_by_id")
        
        if user_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ –í–∞—à –ø–æ—Å—Ç–∞–≤—â–∏–∫ '{supplier_data.get('company_name')}' –±—ã–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –∞–¥–º–∏–Ω–∞
        await callback.message.edit_reply_markup(reply_markup=None)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏
        await bot.send_message(
            chat_id=callback.from_user.id,
            text=f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ '{supplier_data.get('company_name')}' —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω!"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id}: {e}")
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data.startswith("admin:reject_supplier"))
async def handle_reject_supplier_click(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    """
    await callback.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    data = admin_chat_service.parse_admin_callback_data(callback.data)
    supplier_id = data.get("supplier_id")
    
    if not supplier_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(supplier_id=supplier_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    await state.set_state(AdminStates.waiting_rejection_reason)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
@router.message(AdminStates.waiting_rejection_reason)
async def process_rejection_reason(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    reason = message.text.strip()
    
    if not reason:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    supplier_id = state_data.get("supplier_id")
    supplier_data = state_data.get("supplier_data")
    
    try:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not supplier_data:
            supplier_data = await DBService.get_supplier_by_id_static(int(supplier_id))
            if not supplier_data:
                await message.answer(f"–û—à–∏–±–∫–∞: –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Å ID {supplier_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        await DBService.update_supplier_status(int(supplier_id), "rejected", rejection_reason=reason)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        user_id = supplier_data.get("created_by_id")
        
        if user_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå –í–∞—à –ø–æ—Å—Ç–∞–≤—â–∏–∫ '{supplier_data.get('company_name')}' –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                         f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                         f"–í—ã –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        await message.answer(
            f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ '{supplier_data.get('company_name')}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω!\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id}: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data.startswith("admin:edit_supplier"))
async def handle_edit_supplier(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    await callback.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    data = admin_chat_service.parse_admin_callback_data(callback.data)
    supplier_id = data.get("supplier_id")
    
    if not supplier_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_state_data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if current_state_data.get("supplier_id") == supplier_id and current_state_data.get("is_admin_edit"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id} —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            supplier_data = current_state_data.get("supplier_data")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            supplier_data = current_state_data.get("supplier_data")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if not supplier_data:
                supplier_data = await DBService.get_supplier_by_id_static(int(supplier_id))
                if not supplier_data:
                    await callback.message.answer(f"–û—à–∏–±–∫–∞: –ø–æ—Å—Ç–∞–≤—â–∏–∫ —Å ID {supplier_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data({
                "supplier_id": supplier_id,
                "supplier_data": supplier_data,
                "company_name": supplier_data.get("company_name", ""),
                "product_name": supplier_data.get("product_name", ""),
                "main_category": supplier_data.get("category_name", ""),
                "subcategory_name": supplier_data.get("subcategory_name", ""),
                "category_id": supplier_data.get("category_id", ""),
                "description": supplier_data.get("description", ""),
                "country": supplier_data.get("country", ""),
                "region": supplier_data.get("region", ""),
                "city": supplier_data.get("city", ""),
                "address": supplier_data.get("address", ""),
                "contact_username": supplier_data.get("contact_username", ""),
                "contact_phone": supplier_data.get("contact_phone", ""),
                "contact_email": supplier_data.get("contact_email", ""),
                "photos": supplier_data.get("photos", []),
                "video": supplier_data.get("video"),
                "user_id": supplier_data.get("created_by_id"),
                "is_admin_edit": True  # –§–ª–∞–≥, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç–∞
        from app.states.state_config import get_state_config
        from app.states.states import SupplierCreationStates
        
        edit_config = get_state_config(SupplierCreationStates.select_attribute_to_edit)
        attributes = edit_config.get("attributes", [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        attributes_text = "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n\n"
        for idx, attr in enumerate(attributes, 1):
            attributes_text += f"{idx}. {attr['display']}\n"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç–∞
        await state.set_state(SupplierCreationStates.select_attribute_to_edit)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(edit_attributes=attributes)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        await callback.message.answer(
            attributes_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                        callback_data=admin_chat_service.create_admin_callback_data("cancel_edit", supplier_id=supplier_id)
                    )]
                ]
            )
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id}: {e}")
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("admin:cancel_edit"))
async def cancel_edit_supplier(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    await callback.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    data = admin_chat_service.parse_admin_callback_data(callback.data)
    supplier_id = data.get("supplier_id")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    is_confirm_cancel = data.get("confirm") == "yes"
    
    if not is_confirm_cancel:
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–≤–µ—Ä–µ–Ω –ª–∏ –æ–Ω, —á—Ç–æ —Ö–æ—á–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤—ã–π—Ç–∏", 
                        callback_data=admin_chat_service.create_admin_callback_data(
                            "save_supplier", 
                            supplier_id=supplier_id
                        )
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–í—ã–π—Ç–∏ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", 
                        callback_data=admin_chat_service.create_admin_callback_data(
                            "cancel_edit", 
                            supplier_id=supplier_id,
                            confirm="yes"
                        )
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", 
                        callback_data=admin_chat_service.create_admin_callback_data(
                            "edit_supplier", 
                            supplier_id=supplier_id
                        )
                    )
                ]
            ]
        )
        
        await callback.message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=keyboard
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–º–µ–Ω—É
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç–º–µ–Ω–µ
    await callback.message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    
    # –ó–∞–Ω–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if supplier_id:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_data = await state.get_data()
            supplier_data = state_data.get("supplier_data")
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if not supplier_data:
                supplier_data = await DBService.get_supplier_by_id_static(int(supplier_id))
                
            if supplier_data:
                # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                inline_keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                callback_data=admin_chat_service.create_admin_callback_data(
                                    "approve_supplier", 
                                    supplier_id=supplier_id
                                )
                            ),
                            InlineKeyboardButton(
                                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                callback_data=admin_chat_service.create_admin_callback_data(
                                    "reject_supplier", 
                                    supplier_id=supplier_id
                                )
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                callback_data=admin_chat_service.create_admin_callback_data(
                                    "edit_supplier", 
                                    supplier_id=supplier_id
                                )
                            )
                        ]
                    ]
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(supplier_data=supplier_data)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
                from app.utils.message_utils import send_supplier_card
                await send_supplier_card(
                    bot=bot,
                    chat_id=callback.from_user.id,
                    supplier=supplier_data,
                    keyboard=inline_keyboard,
                    include_video=True  # –í–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {e}")
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
@router.callback_query(F.data.startswith("admin:save_supplier"))
async def save_edited_supplier(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    """
    await callback.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    data = admin_chat_service.parse_admin_callback_data(callback.data)
    supplier_id = data.get("supplier_id")
    
    if not supplier_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        await state.clear()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id}")
        logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {state_data}")
        
        async with get_db_session() as session:
            db_service = DBService(session)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            success = await db_service.update_supplier(
                supplier_id=int(supplier_id),
                company_name=state_data.get("company_name"),
                product_name=state_data.get("product_name"),
                category_id=state_data.get("category_id"),
                description=state_data.get("description"),
                country=state_data.get("country"),
                region=state_data.get("region"),
                city=state_data.get("city"),
                address=state_data.get("address"),
                contact_username=state_data.get("contact_username"),
                contact_phone=state_data.get("contact_phone"),
                contact_email=state_data.get("contact_email"),
                photos=state_data.get("photos", []),
                video=state_data.get("video")
            )
            
            if success:
                logger.info(f"–ü–æ—Å—Ç–∞–≤—â–∏–∫ {supplier_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                
                # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                await callback.message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                supplier_data = await DBService.get_supplier_by_id_static(int(supplier_id))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(supplier_data=supplier_data)
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                inline_keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                callback_data=admin_chat_service.create_admin_callback_data(
                                    "approve_supplier", 
                                    supplier_id=supplier_id
                                )
                            ),
                            InlineKeyboardButton(
                                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                callback_data=admin_chat_service.create_admin_callback_data(
                                    "reject_supplier", 
                                    supplier_id=supplier_id
                                )
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                                callback_data=admin_chat_service.create_admin_callback_data(
                                    "edit_supplier", 
                                    supplier_id=supplier_id
                                )
                            )
                        ]
                    ]
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
                from app.utils.message_utils import send_supplier_card
                await send_supplier_card(
                    bot=bot,
                    chat_id=callback.from_user.id,
                    supplier=supplier_data,
                    keyboard=inline_keyboard,
                    include_video=True  # –í–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ –≤ –≥—Ä—É–ø–ø—É –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ
                )
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id}")
                await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id}: {e}")
        import traceback
        logger.error(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback.format_exc()}")
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def show_admin_supplier_confirmation(message: Message, state: FSMContext, bot: Bot):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    supplier_id = state_data.get("supplier_id")
    
    if not supplier_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ:\n\n"
    confirmation_text += f"–ö–æ–º–ø–∞–Ω–∏—è: {state_data.get('company_name', '')}\n"
    confirmation_text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {state_data.get('main_category', '')}\n"
    confirmation_text += f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {state_data.get('subcategory_name', '')}\n"
    confirmation_text += f"–ü—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞: {state_data.get('product_name', '')}\n"
    confirmation_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {state_data.get('description', '')}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if state_data.get('country'):
        confirmation_text += f"–°—Ç—Ä–∞–Ω–∞: {state_data.get('country')}\n"
        if state_data.get('region'):
            confirmation_text += f"–†–µ–≥–∏–æ–Ω: {state_data.get('region')}\n"
        if state_data.get('city'):
            confirmation_text += f"–ì–æ—Ä–æ–¥: {state_data.get('city')}\n"
        if state_data.get('address'):
            confirmation_text += f"–ê–¥—Ä–µ—Å: {state_data.get('address')}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
    confirmation_text += "\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
    confirmation_text += f"Telegram: {state_data.get('contact_username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    confirmation_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {state_data.get('contact_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    confirmation_text += f"Email: {state_data.get('contact_email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö
    confirmation_text += "\n–ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã:\n"
    photos = state_data.get('photos', [])
    if photos and len(photos) > 0:
        confirmation_text += f"- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(photos)} —à—Ç.\n"
    else:
        confirmation_text += "- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n"
    
    confirmation_text += "- –í–∏–¥–µ–æ: –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n" if state_data.get('video') else "- –í–∏–¥–µ–æ: –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", 
                    callback_data=admin_chat_service.create_admin_callback_data(
                        "save_supplier", 
                        supplier_id=supplier_id
                    )
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                    callback_data=admin_chat_service.create_admin_callback_data(
                        "edit_supplier", 
                        supplier_id=supplier_id
                    )
                )
            ],
            [
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", 
                    callback_data=admin_chat_service.create_admin_callback_data(
                        "cancel_edit", 
                        supplier_id=supplier_id
                    )
                )
            ]
        ]
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await message.answer(
        confirmation_text,
        reply_markup=keyboard
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞
async def check_if_admin_editing(message: Message, state: FSMContext, attribute_name: str, bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        attribute_name: –ò–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ show_admin_supplier_confirmation
        
    Returns:
        bool: True –µ—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    """
    state_data = await state.get_data()
    if state_data.get("editing_attribute") == attribute_name and state_data.get("is_admin_edit"):
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await message.answer(f"{attribute_name.replace('_', ' ').capitalize()} –æ–±–Ω–æ–≤–ª–µ–Ω(–∞).")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
        await state.update_data(editing_attribute=None)
        
        await show_admin_supplier_confirmation(message, state, bot)
        return True
    return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
@router.message(CommandFilter("chatid"))
async def get_chat_id(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chatid –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ADMIN_GROUP_CHAT_ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    chat_id = message.chat.id
    chat_type = message.chat.type
    chat_title = getattr(message.chat, 'title', '–õ–∏—á–Ω—ã–π —á–∞—Ç')
    
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω ID —á–∞—Ç–∞: {chat_id}, —Ç–∏–ø: {chat_type}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {chat_title}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ
    response_text = f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ</b>\n\n"
    response_text += f"üÜî ID —á–∞—Ç–∞: <code>{chat_id}</code>\n"
    response_text += f"üìù –¢–∏–ø —á–∞—Ç–∞: {chat_type}\n"
    response_text += f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}\n\n"
    
    if chat_type != "private":
        # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        response_text += "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ .env:\n\n"
        response_text += f"<code>ADMIN_GROUP_CHAT_ID={chat_id}</code>\n\n"
        response_text += "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        response_text += f"<code>/setadminchat {chat_id}</code>"
    
    await message.answer(
        response_text,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ
@router.message(CommandFilter("setadminchat"))
async def set_admin_chat(message: Message, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setadminchat –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ
    –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    admin_ids = []
    if isinstance(config.ADMIN_IDS, str) and config.ADMIN_IDS:
        admin_ids = [int(admin_id) for admin_id in config.ADMIN_IDS.split(',') if admin_id.strip()]
    elif isinstance(config.ADMIN_IDS, list):
        admin_ids = [int(admin_id) for admin_id in config.ADMIN_IDS if str(admin_id).strip()]
    
    if message.from_user.id not in admin_ids and str(message.from_user.id) not in [str(admin_id) for admin_id in admin_ids]:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥–º–∏–Ω-—á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–µ–∑ –ø—Ä–∞–≤: {message.from_user.id}")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split(maxsplit=1)
    
    if len(args) > 1:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID —á–∞—Ç–∞, –ø—Ä–æ–±—É–µ–º –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        try:
            new_chat_id = int(args[1].strip())
            if config.update_admin_chat_id(new_chat_id):
                # –û–±–Ω–æ–≤–ª—è–µ–º ID —á–∞—Ç–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ
                admin_chat_service.admin_chat_id = new_chat_id
                
                await message.answer(
                    f"‚úÖ ID –∞–¥–º–∏–Ω-—á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: <code>{new_chat_id}</code>",
                    parse_mode="HTML"
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    test_msg = await bot.send_message(
                        chat_id=new_chat_id,
                        text=f"‚úÖ –≠—Ç–æ—Ç —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ID: {new_chat_id})"
                    )
                    logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω-—á–∞—Ç {new_chat_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {new_chat_id}: {e}")
                    await message.answer(
                        f"‚ö†Ô∏è ID —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –∏ –∏–º–µ–µ—Ç –ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."
                    )
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ID –∞–¥–º–∏–Ω-—á–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID.")
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    else:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω—Å–∫–∏–π
        current_chat_id = message.chat.id
        if config.update_admin_chat_id(current_chat_id):
            # –û–±–Ω–æ–≤–ª—è–µ–º ID —á–∞—Ç–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ
            admin_chat_service.admin_chat_id = current_chat_id
            
            await message.answer(
                f"‚úÖ –¢–µ–∫—É—â–∏–π —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ID: <code>{current_chat_id}</code>)",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω—Å–∫–∏–π.")

def register_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥—É–ª—è
    """
    dp.include_router(router)
