from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext, StorageKey
from aiogram.fsm.state import State
from app.states.states import HelpStates
from app.services import get_db_session, DBService, admin_chat_service
from app.keyboards.inline import get_main_menu_keyboard_by_role
import logging

router = Router()
logger = logging.getLogger(__name__)

# 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@router.callback_query(F.data == "help_action")
async def help_action_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(HelpStates.waiting_problem_description)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –º—ã —Å–º–æ–∂–µ–º –ø–æ–º–æ—á—å.")

# 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
@router.message(HelpStates.waiting_problem_description)
async def process_problem_description(message: Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    username = message.from_user.username or "-"
    problem_text = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with get_db_session() as session:
        db_service = DBService(session)
        query = """
            INSERT INTO help_requests (user_id, request, status, created_at)
            VALUES (:user_id, :request, 'pending', NOW())
            RETURNING id
        """
        result = await db_service.execute_query(query, {"user_id": user_id, "request": problem_text})
        help_request_id = result.scalar_one()
        await db_service.commit()

    await state.clear()
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    async with get_db_session() as session:
        db_service = DBService(session)
        user_data = await db_service.get_user_by_id(user_id)
        user_role = user_data["role"] if user_data and "role" in user_data else None
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_main_menu_keyboard_by_role(user_role)
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–±—Ä–∞—Ç—å —Å–µ–±–µ"
    admin_text = f"üÜò <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n" \
                 f"<b>ID:</b> <code>{user_id}</code>\n" \
                 f"<b>Username:</b> {username}\n" \
                 f"<b>–í–æ–ø—Ä–æ—Å:</b> {problem_text}"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì• –ó–∞–±—Ä–∞—Ç—å —Å–µ–±–µ",
                    callback_data=admin_chat_service.create_admin_callback_data(
                        "take_help_request", help_request_id=help_request_id, user_id=user_id
                    )
                )
            ]
        ]
    )
    await admin_chat_service.send_message(bot, admin_text, reply_markup=keyboard)

# 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–∞—Ç—å —Å–µ–±–µ" –¥–ª—è –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data.startswith("admin:take_help_request"))
async def admin_take_help_request(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    data = admin_chat_service.parse_admin_callback_data(callback.data)
    help_request_id = data.get("help_request_id")
    user_id = data.get("user_id")
    admin_id = callback.from_user.id
    admin_username = callback.from_user.username or f"ID:{admin_id}"

    if not help_request_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–ø—Ä–æ—Å–∞.")
        return

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤
    try:
        await callback.message.edit_text(
            callback.message.text + f"\n\nüîÑ –í–æ–ø—Ä–æ—Å –≤–∑—è—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_username}",
            reply_markup=None
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.message.answer(f"–í–æ–ø—Ä–æ—Å –≤–∑—è—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_username}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –≤ –ª–∏—á–∫—É —Å –∫–Ω–æ–ø–∫–æ–π
    try:
        async with get_db_session() as session:
            db_service = DBService(session)
            query = "SELECT request FROM help_requests WHERE id = :id"
            result = await db_service.execute_query(query, {"id": int(help_request_id)})
            row = result.mappings().first()
            question_text = row["request"] if row else "(–≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω)"
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
        answer_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–í–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç",
                    callback_data=f"admin:answer_help_request:{help_request_id}:{user_id}"
                )]
            ]
        )
        await bot.send_message(
            chat_id=admin_id,
            text=f"üÜò –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n{question_text}",
            reply_markup=answer_keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω—É –≤ –ª–∏—á–∫—É: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ª–∏—á–∫—É. –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∑–¥–µ—Å—å.")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç' –≤ –ª–∏—á–∫–µ
@router.callback_query(F.data.startswith("admin:answer_help_request"))
async def admin_start_answer_help(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parts = callback.data.split(":")
    if len(parts) < 4:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å.")
        return
    help_request_id = parts[2]
    user_id = parts[3]
    await state.update_data(help_request_id=help_request_id, help_user_id=user_id)
    await state.set_state(HelpStates.waiting_admin_answer)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", reply_markup=ReplyKeyboardRemove())

# 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
@router.message(HelpStates.waiting_admin_answer)
async def process_admin_answer(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    help_request_id = data.get("help_request_id")
    user_id = data.get("help_user_id")
    answer_text = message.text.strip()

    if not help_request_id or not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with get_db_session() as session:
        db_service = DBService(session)
        query = "SELECT request FROM help_requests WHERE id = :id"
        result = await db_service.execute_query(query, {"id": int(help_request_id)})
        row = result.mappings().first()
        question_text = row["request"] if row else "(–≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω)"

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    async with get_db_session() as session:
        db_service = DBService(session)
        query = """
            UPDATE help_requests SET answer = :answer, status = 'answered', admin_id = :admin_id WHERE id = :id
        """
        await db_service.execute_query(query, {"id": int(help_request_id), "answer": answer_text, "admin_id": message.from_user.id})
        await db_service.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–º
    try:
        await bot.send_message(
            chat_id=int(user_id),
            text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n<b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b> {question_text}\n\n<b>–û—Ç–≤–µ—Ç:</b> {answer_text}",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    await state.clear()
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    admin_id = message.from_user.id
    async with get_db_session() as session:
        db_service = DBService(session)
        user_data = await db_service.get_user_by_id(admin_id)
        user_role = user_data["role"] if user_data and "role" in user_data else None
    await message.answer(
        "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=get_main_menu_keyboard_by_role(user_role)
    )

def register_handlers(dp):
    dp.include_router(router)