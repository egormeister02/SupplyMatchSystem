from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import text
import logging
import asyncio

from app.states.states import JokeStates
from app.services.deepseek import DeepSeekService
from app.services.database import DBService, get_db_session
from app.utils.message_utils import send_joke_message

logger = logging.getLogger(__name__)

router = Router(name="base_commands")

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        " –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–Ω–µ–∫–¥–æ—Ç–æ–≤!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ —Å–º–µ—à–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É. "
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, –æ —á–µ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–µ—è—Ç—å—Å—è, –∏ —è –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–Ω–µ–∫–¥–æ—Ç!"
    )
    await message.answer(welcome_text)
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    from sqlalchemy import text
    async with get_db_session() as session:
        await session.execute(
            text("INSERT INTO users (tg_id) VALUES (:tg_id) ON CONFLICT (tg_id) DO NOTHING"),
            {"tg_id": message.from_user.id}
        )
        await session.commit()
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–º—ã
    await request_joke_topic(message, state)

async def request_joke_topic(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–º—ã –∞–Ω–µ–∫–¥–æ—Ç–∞ —Å inline –∫–Ω–æ–ø–∫–æ–π
    """
    request_text = (
        " –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤', '–ø—Ä–æ –∫–æ—à–µ–∫', '–ø—Ä–æ —Ä–∞–±–æ—Ç—É' –∏ —Ç.–¥."
    )
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "—Å–ª—É—á–∞–π–Ω—ã–π"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç",
                    callback_data=f"random_joke_{message.from_user.id}"
                )
            ]
        ]
    )
    
    await message.answer(request_text, reply_markup=keyboard)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–º—ã
    await state.set_state(JokeStates.waiting_topic)

@router.message(JokeStates.waiting_topic)
async def process_topic(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–º—ã"""
    import random
    topic = message.text.strip()
    user_id = message.from_user.id
    
    if not topic:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–∞.")
        return
    
    await message.answer("ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–µ–∫–¥–æ—Ç—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    try:
        deepseek_service = DeepSeekService.get_instance()
        jokes_response = await deepseek_service.request_jokes(topic, n=5)
        jokes = await deepseek_service.parse_with_retry(
            content=jokes_response,
            parse_func=DeepSeekService._parse_jokes_list
        )
        idx = random.randint(0, len(jokes) - 1)
        joke_text = jokes[idx]["text"]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∞–Ω–µ–∫–¥–æ—Ç—ã –≤ –ë–î, users_jokes —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
        topic_id, joke_ids, users_jokes_id = await deepseek_service.save_jokes_to_db(topic, jokes, user_id, idx)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ users_jokes_id –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if users_jokes_id is not None:
            await send_joke_message(message, joke_text, users_jokes_id)
        else:
            logger.error(f"Failed to get users_jokes_id for user {user_id}, topic '{topic}'")
            await message.answer("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"Error processing topic '{topic}' for user {user_id}: {str(e)}")
        await message.answer(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É."
        )
    
    await state.clear()

async def request_joke_with_retry(deepseek_service: DeepSeekService, topic: str, max_retries: int = 3) -> str:
    
    for attempt in range(max_retries):
        try:
            logger.debug(f"Attempting to request joke for topic '{topic}', attempt {attempt + 1}/{max_retries}")
            return await deepseek_service.request_joke(topic)
        except Exception as e:
            logger.warning(f"Attempt {attempt + 1} failed for topic '{topic}': {str(e)}")
            if attempt == max_retries - 1:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                raise
            else:
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                wait_time = 2 ** attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1, 2, 4 —Å–µ–∫—É–Ω–¥—ã
                logger.debug(f"Waiting {wait_time} seconds before retry...")
                await asyncio.sleep(wait_time)

@router.callback_query(F.data.startswith("like_") | F.data.startswith("dislike_"))
async def handle_reaction_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    logger.debug(f"Received callback_data in handle_reaction_callback: {callback.data}")
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: "like_123_456_reaction_full" –∏–ª–∏ "dislike_123_456_reaction_only"
        parts = callback.data.split("_")
        
        reaction_type = parts[0] # like –∏–ª–∏ dislike
            
        users_jokes_id = int(parts[1])
        message_id = int(parts[2])

        # –°—É—Ñ—Ñ–∏–∫—Å –º–æ–∂–µ—Ç –±—ã—Ç—å "reaction_full" –∏–ª–∏ "reaction_only"
        if len(parts) >= 5:
            current_suffix = f"{parts[3]}_{parts[4]}" # reaction_full –∏–ª–∏ reaction_only
        else:
            current_suffix = parts[3] # reaction_full –∏–ª–∏ reaction_only
        
        logger.debug(f"Processing {reaction_type} for users_jokes_id={users_jokes_id}, message_id={message_id}, user_id={user_id}, suffix={current_suffix}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –ø–æ users_jokes.id
        await DBService.update_users_jokes_reaction_by_id(users_jokes_id, reaction_type)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç–∞ –∏ —Ç–µ–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        joke_text = await DBService.get_joke_text_by_users_jokes_id(users_jokes_id, user_id)
        if not joke_text:
            await callback.answer("–ê–Ω–µ–∫–¥–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        new_state = "nav_only" if current_suffix == "reaction_full" else "none"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∞–∫—Ü–∏–∏
        from app.utils.message_utils import create_dynamic_keyboard, edit_message_with_reaction

        new_keyboard = await create_dynamic_keyboard(users_jokes_id, message_id, new_state)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è—è —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        message_edited = await edit_message_with_reaction(
            callback.bot, 
            chat_id, 
            message_id, 
            joke_text, 
            reaction_type, # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —ç–º–æ–¥–∂–∏
            reply_markup=new_keyboard
        )
        if not message_edited:
            logger.error(f"Failed to edit message {message_id} with new joke")
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error handling reaction callback for user {user_id} with data {callback.data}: {str(e)}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏ (–¥–∞–Ω–Ω—ã–µ: {callback.data})", show_alert=True)

@router.callback_query(F.data.startswith("random_joke_"))
async def handle_random_joke_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    logger.debug(f"Received callback_data in handle_random_joke_callback: {callback.data}")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤–∏–¥–µ–ª
        joke_row = await DBService.get_random_unseen_joke_for_user(user_id)
        if not joke_row:
            await callback.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –¥–ª—è –≤–∞—Å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return

        try:
            joke_id = joke_row["id"]
        except (KeyError, TypeError) as e:
            logger.error(f"Failed to get joke_id from joke_row: {e}, joke_row: {joke_row}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞")
            return
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ joke_id
        if not isinstance(joke_id, int) or joke_id <= 0:
            logger.error(f"Invalid joke_id type or value: {type(joke_id)}, value: {joke_id}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞")
            return
            
        joke_text = joke_row["joke"]

        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ users_jokes (—Ä–µ–∞–∫—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'skip') –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º id
        users_jokes_id = await DBService.record_user_joke_interaction(user_id, joke_id, reaction="skip")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ "full")
        from app.utils.message_utils import send_joke_message
        if users_jokes_id is not None:
            await send_joke_message(callback.message, joke_text, users_jokes_id)
        else:
            await send_joke_message(callback.message, joke_text, None)
        await callback.answer()

    except Exception as e:
        logger.error(f"Error handling random joke callback for user {user_id} with data {callback.data}: {str(e)}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞ (–¥–∞–Ω–Ω—ã–µ: {callback.data})", show_alert=True)

@router.callback_query(F.data.startswith("change_topic_"))
async def handle_change_topic_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    logger.debug(f"Received callback_data in handle_change_topic_callback: {callback.data}")
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: "change_topic_456_nav_full" –∏–ª–∏ "change_topic_456_nav_only"
        parts = callback.data.split("_")
        message_id = int(parts[3])
        users_jokes_id = int(parts[2])
        current_suffix = parts[4] + "_" + parts[5] # nav_full –∏–ª–∏ nav_only
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        new_state = "reaction_only" if current_suffix == "nav_full" else "none"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        from app.utils.message_utils import create_dynamic_keyboard
        if users_jokes_id is not None:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å users_jokes_id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∞–∫—Ü–∏–∏
            new_keyboard = await create_dynamic_keyboard(users_jokes_id, message_id, new_state)
            await callback.bot.edit_message_reply_markup(
                        chat_id=chat_id,
                        message_id=message_id,
                        reply_markup=new_keyboard
                    )
        else:  # –ï—Å–ª–∏ users_jokes_id –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –≤—Å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=None
            )
            
        await callback.answer()
        await request_joke_topic(callback.message, state)
        
    except Exception as e:
        logger.error(f"Error handling change topic callback for user {user_id} with data {callback.data}: {str(e)}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ (–¥–∞–Ω–Ω—ã–µ: {callback.data})", show_alert=True)

@router.callback_query(F.data.startswith("next_joke_"))
async def handle_next_joke_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    logger.debug(f"Received callback_data in handle_next_joke_callback: {callback.data}")
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: "next_joke_456_nav_full" –∏–ª–∏ "next_joke_456_nav_only"
        parts = callback.data.split("_")
        if len(parts) < 5: # –ú–∏–Ω–∏–º—É–º 5 —á–∞—Å—Ç–µ–π: next, joke, message_id, nav, suffix
            await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏")
            return
        
        
        message_id = int(parts[3])  # parts[2] —Å–æ–¥–µ—Ä–∂–∏—Ç message_id, —Ç–∞–∫ –∫–∞–∫ next_joke —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        users_jokes_id = int(parts[2])
        current_suffix = parts[4] + "_" + parts[5] # nav_full –∏–ª–∏ nav_only

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        new_state = "reaction_only" if current_suffix == "nav_full" else "none"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        from app.utils.message_utils import create_dynamic_keyboard
        if users_jokes_id is not None:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å users_jokes_id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∞–∫—Ü–∏–∏
            new_keyboard = await create_dynamic_keyboard(users_jokes_id, message_id, new_state)
            await callback.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=new_keyboard
            )
        else:  # –ï—Å–ª–∏ users_jokes_id –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –≤—Å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=None
            )
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤–∏–¥–µ–ª
        joke_row = await DBService.get_random_joke_for_user(user_id)
        if not joke_row:
            await callback.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –¥–ª—è –≤–∞—Å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return
        
        try:
            joke_id = joke_row["id"]
        except (KeyError, TypeError) as e:
            logger.error(f"Failed to get joke_id from joke_row: {e}, joke_row: {joke_row}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞")
            return
            
        joke_text = joke_row["joke"]
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ users_jokes (—Ä–µ–∞–∫—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'skip') –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º id
        users_jokes_id_new = await DBService.record_user_joke_interaction(user_id, joke_id, reaction="skip")
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∞–Ω–µ–∫–¥–æ—Ç –≤ –¢–û –ñ–ï —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–µ–Ω—è—è —Ç–µ–∫—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from app.utils.message_utils import send_joke_message

        # –í–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await send_joke_message(callback.message, joke_text, users_jokes_id_new)
        

        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error handling next joke callback for user {user_id} with data {callback.data}: {str(e)}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞ (–¥–∞–Ω–Ω—ã–µ: {callback.data})", show_alert=True)



def register_handlers(dp):
    dp.include_router(router)