"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞—è–≤–∫–∏").
"""

import logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from app.states.states import MyRequestStates, RequestCreationStates
from app.services import get_db_session, DBService
from app.utils.message_utils import send_request_card
from app.config.action_config import get_action_config
from app.config.logging import app_logger
from app.keyboards.inline import get_back_button, get_main_user_menu_keyboard
from app.states.state_config import get_state_config

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –§—É–Ω–∫—Ü–∏—è-—Ö–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è callback
async def show_user_requests(user_id: int, chat_id: int, state: FSMContext, bot: Bot):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id (int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        requests = await DBService.get_user_requests_static(user_id)
        
        # –ï—Å–ª–∏ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç
        if not requests:
            await bot.send_message(
                chat_id=chat_id,
                text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é –∑–∞—è–≤–æ–∫."
            )
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            user_requests=requests,
            current_index=0
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        await state.set_state(MyRequestStates.viewing_requests)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏ –∑–∞—è–≤–∫—É
        current_index = 0
        request = requests[current_index]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = create_request_navigation_keyboard(request, current_index, len(requests))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∞
        matches_count = None
        if request.get("status") == "approved":
            matches_count = await DBService.get_matches_count_for_request(request.get("id"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏
        result = await send_request_card(
            bot=bot,
            chat_id=chat_id,
            request=request,
            keyboard=keyboard,
            show_status=True,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            matches_count=matches_count  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(
            keyboard_message_id=result.get("keyboard_message_id"),
            media_message_ids=result.get("media_message_ids", [])
        )
        
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞—è–≤–∫–∏"
@router.callback_query(F.data == "view_my_requests")
async def handle_view_my_requests(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        if callback.data == "view_my_requests":
            await callback.message.delete()
    except Exception as e:
        app_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞—è–≤–æ–∫
    await show_user_requests(
        user_id=callback.from_user.id,
        chat_id=callback.message.chat.id,
        state=state,
        bot=bot
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∑–∞—è–≤–∫–∞–º
def create_request_navigation_keyboard(request, current_index, total_count):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–æ–π.
    
    Args:
        request (dict): –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        current_index (int): –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ
        total_count (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–æ–π
    """
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_row = [
        InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="prev_my_request"),
        InlineKeyboardButton(text=f"{current_index + 1}/{total_count}", callback_data="current_my_request"),
        InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="next_my_request")
    ]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    status = request.get("status", "pending")
    request_id = request.get("id")
    
    keyboard = []
    keyboard.append(navigation_row)
    
    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
    if status == "approved":
        keyboard.append([
            InlineKeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏", callback_data=f"view_request_suppliers:{request_id}")
        ])
        keyboard.append([
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_request:{request_id}")
        ])
    elif status == "rejected":
        # –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ - —É–¥–∞–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        keyboard.append([
            InlineKeyboardButton(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data=f"reapply_request:{request_id}")
        ])
        keyboard.append([
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_request:{request_id}")
        ])
        keyboard.append([
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_request:{request_id}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
    keyboard.append([
        get_back_button("requests_list", is_state=False, button_text="–ù–∞–∑–∞–¥")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞"
@router.callback_query(MyRequestStates.viewing_requests, F.data == "next_my_request")
async def next_my_request(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞—è–≤–∫–µ –≤ —Å–ø–∏—Å–∫–µ.
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    requests = state_data.get("user_requests", [])
    current_index = state_data.get("current_index", 0)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å (—Å —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å—é)
    next_index = (current_index + 1) % len(requests)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É
    request = requests[next_index]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_index=next_index)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_request_navigation_keyboard(request, next_index, len(requests))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    keyboard_message_id = state_data.get("keyboard_message_id")
    media_message_ids = state_data.get("media_message_ids", [])
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    try:
        for msg_id in media_message_ids:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        
        if keyboard_message_id and keyboard_message_id not in media_message_ids:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=keyboard_message_id)
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∞
    matches_count = None
    if request.get("status") == "approved":
        matches_count = await DBService.get_matches_count_for_request(request.get("id"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    result = await send_request_card(
        bot=bot,
        chat_id=callback.message.chat.id,
        request=request,
        keyboard=keyboard,
        show_status=True,
        matches_count=matches_count  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        keyboard_message_id=result.get("keyboard_message_id"),
        media_message_ids=result.get("media_message_ids", [])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞—è–≤–∫–∞"
@router.callback_query(MyRequestStates.viewing_requests, F.data == "prev_my_request")
async def prev_my_request(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞—è–≤–∫–µ –≤ —Å–ø–∏—Å–∫–µ.
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    requests = state_data.get("user_requests", [])
    current_index = state_data.get("current_index", 0)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–µ–∫—Å (—Å —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å—é)
    prev_index = (current_index - 1) % len(requests)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞—è–≤–∫—É
    request = requests[prev_index]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_index=prev_index)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_request_navigation_keyboard(request, prev_index, len(requests))
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    keyboard_message_id = state_data.get("keyboard_message_id")
    media_message_ids = state_data.get("media_message_ids", [])
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    try:
        for msg_id in media_message_ids:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        
        if keyboard_message_id and keyboard_message_id not in media_message_ids:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=keyboard_message_id)
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∞
    matches_count = None
    if request.get("status") == "approved":
        matches_count = await DBService.get_matches_count_for_request(request.get("id"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    result = await send_request_card(
        bot=bot,
        chat_id=callback.message.chat.id,
        request=request,
        keyboard=keyboard,
        show_status=True,
        matches_count=matches_count  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        keyboard_message_id=result.get("keyboard_message_id"),
        media_message_ids=result.get("media_message_ids", [])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
@router.callback_query(MyRequestStates.viewing_requests, F.data.startswith("delete_request:"))
async def confirm_delete_request(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
    request_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(request_to_delete=request_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    await state.set_state(MyRequestStates.confirm_delete)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    state_config = get_state_config(MyRequestStates.confirm_delete)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    await callback.message.answer(
        state_config["text"],
        reply_markup=state_config["markup"]
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(MyRequestStates.confirm_delete, F.data == "confirm_delete")
async def delete_request(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    request_id = state_data.get("request_to_delete")
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard_message_id = state_data.get("keyboard_message_id")
    media_message_ids = state_data.get("media_message_ids", [])
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.delete()
    
    if not request_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        await state.set_state(MyRequestStates.viewing_requests)
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏
    try:
        for msg_id in media_message_ids:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
            except Exception as e:
                app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
        
        if keyboard_message_id and keyboard_message_id not in media_message_ids:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=keyboard_message_id)
            except Exception as e:
                app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π {keyboard_message_id}: {e}")
    except Exception as e:
        app_logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        
    # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    deleted = await DBService.delete_request_static(request_id)
    
    if deleted:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        requests = await DBService.get_user_requests_static(callback.from_user.id)
        
        if not requests:
            # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞—è–≤–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            await callback.message.answer(
                "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫."
            )
            await state.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞—è–≤–æ–∫
            action_config = get_action_config("my_requests")
            await callback.message.answer(
                action_config["text"],
                reply_markup=action_config["markup"]
            )
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        current_index = 0
        await state.update_data(
            user_requests=requests,
            current_index=current_index
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        await callback.message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞—è–≤–∫—É
        request = requests[current_index]
        keyboard = create_request_navigation_keyboard(request, current_index, len(requests))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫
        await state.set_state(MyRequestStates.viewing_requests)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∞
        matches_count = None
        if request.get("status") == "approved":
            matches_count = await DBService.get_matches_count_for_request(request.get("id"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        result = await send_request_card(
            bot=bot,
            chat_id=callback.message.chat.id,
            request=request,
            keyboard=keyboard,
            show_status=True,
            matches_count=matches_count  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            keyboard_message_id=result.get("keyboard_message_id"),
            media_message_ids=result.get("media_message_ids", [])
        )
    else:
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        await state.set_state(MyRequestStates.viewing_requests)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(MyRequestStates.confirm_delete, F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.
    """
    await callback.answer()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.delete()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await state.set_state(MyRequestStates.viewing_requests)
    
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
@router.callback_query(MyRequestStates.viewing_requests, F.data.startswith("reapply_request:"))
async def reapply_request_click(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
    request_id = int(callback.data.split(":")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    await state.update_data(request_to_reapply=request_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    request_data = await DBService.get_request_by_id_static(request_id)
    if not request_data:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
    rejection_reason = request_data.get("rejection_reason", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    state_config = get_state_config(MyRequestStates.confirm_reapply)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    confirm_text = f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É #{request_data.get('id')} –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
    confirm_text += f"‚ùóÔ∏è –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {rejection_reason}\n\n"
    confirm_text += "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É?"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    await state.set_state(MyRequestStates.confirm_reapply)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    await callback.message.answer(
        confirm_text,
        reply_markup=state_config["markup"]
    )

@router.callback_query(MyRequestStates.confirm_reapply, F.data == "confirm_reapply")
async def confirm_reapply_request(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    request_id = state_data.get("request_to_reapply")
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard_message_id = state_data.get("keyboard_message_id")
    media_message_ids = state_data.get("media_message_ids", [])
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.delete()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏
    try:
        for msg_id in media_message_ids:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
            except Exception as e:
                app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
        
        if keyboard_message_id and keyboard_message_id not in media_message_ids:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=keyboard_message_id)
            except Exception as e:
                app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π {keyboard_message_id}: {e}")
    except Exception as e:
        app_logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
    
    if not request_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
        await state.set_state(MyRequestStates.viewing_requests)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    reapplied = await DBService.reapply_request_static(request_id)
    
    if reapplied:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        requests = await DBService.get_user_requests_static(callback.from_user.id)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
        current_index = 0
        for i, request in enumerate(requests):
            if request["id"] == request_id:
                current_index = i
                break
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        request_data = await DBService.get_request_by_id_static(request_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            from app.services import admin_chat_service
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            admin_request_data = {
                "id": request_data.get("id", ""),
                "category_name": request_data.get("category_name", ""),
                "main_category_name": request_data.get("main_category_name", ""),
                "description": request_data.get("description", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                "photos": request_data.get("photos", []),
                "contact_username": request_data.get("contact_username", ""),
                "contact_phone": request_data.get("contact_phone", ""),
                "contact_email": request_data.get("contact_email", "")
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
            result = await admin_chat_service.send_request_to_admin_chat(
                bot=bot,
                request_id=request_id,
                request_data=admin_request_data
            )
            
            if result:
                app_logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ ID:{request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            else:
                app_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞—è–≤–∫–µ ID:{request_id}")
                
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {str(e)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            user_requests=requests,
            current_index=current_index
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await callback.message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É!")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        request = requests[current_index]
        keyboard = create_request_navigation_keyboard(request, current_index, len(requests))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫
        await state.set_state(MyRequestStates.viewing_requests)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∞
        matches_count = None
        if request.get("status") == "approved":
            matches_count = await DBService.get_matches_count_for_request(request.get("id"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        result = await send_request_card(
            bot=bot,
            chat_id=callback.message.chat.id,
            request=request,
            keyboard=keyboard,
            show_status=True,
            matches_count=matches_count  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            keyboard_message_id=result.get("keyboard_message_id"),
            media_message_ids=result.get("media_message_ids", [])
        )
    else:
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.set_state(MyRequestStates.viewing_requests)

@router.callback_query(MyRequestStates.confirm_reapply, F.data == "cancel_reapply")
async def cancel_reapply(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.
    """
    await callback.answer()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.delete()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await state.set_state(MyRequestStates.viewing_requests)
    
    await callback.message.answer("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
@router.callback_query(MyRequestStates.viewing_requests, F.data.startswith("edit_request:"))
async def edit_request(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
        request_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∏–∑ –ë–î
        request_data = await DBService.get_request_by_id_static(request_id)
        
        if not request_data:
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        state_data = await state.get_data()
        keyboard_message_id = state_data.get("keyboard_message_id")
        media_message_ids = state_data.get("media_message_ids", [])
        user_requests = state_data.get("user_requests", [])
        current_index = state_data.get("current_index", 0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
            saved_keyboard_message_id=keyboard_message_id,
            saved_media_message_ids=media_message_ids,
            saved_user_requests=user_requests,
            saved_current_index=current_index,
            saved_request_id=request_id
        )
        
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ –∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è-–Ω–æ—Å–∏—Ç–µ–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            if keyboard_message_id and keyboard_message_id not in media_message_ids:
                # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è-–Ω–æ—Å–∏—Ç–µ–ª—è
                await bot.edit_message_reply_markup(
                    chat_id=callback.message.chat.id, 
                    message_id=keyboard_message_id,
                    reply_markup=None
                )
                app_logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É —Å–æ–æ–±—â–µ–Ω–∏—è-–Ω–æ—Å–∏—Ç–µ–ª—è {keyboard_message_id}")
            
            # –ï—Å–ª–∏ —É –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–æ—Ç–æ)
            for msg_id in media_message_ids:
                try:
                    await bot.edit_message_reply_markup(
                        chat_id=callback.message.chat.id, 
                        message_id=msg_id,
                        reply_markup=None
                    )
                    app_logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}")
                except Exception as e:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–µ—Ç
                    pass
        except Exception as e:
            app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            request_id=request_id,  # ID –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            description=request_data.get("description", ""),
            
            # –î–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            main_category=request_data.get("main_category_name", ""),
            subcategory_name=request_data.get("category_name", ""),
            category_id=request_data.get("category_id"),
            
            # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            contact_username=request_data.get("contact_username", ""),
            contact_phone=request_data.get("contact_phone", ""),
            contact_email=request_data.get("contact_email", ""),
            
            # –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã
            photos=request_data.get("photos", []),
            video=request_data.get("video"),
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            is_edit_mode=True,  # –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            from_my_requests=True,  # –§–ª–∞–≥, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å –∏–∑ "–ú–æ–∏ –∑–∞—è–≤–∫–∏"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            status=request_data.get("status", ""),
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id=callback.from_user.id
        )
        
        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –º–∏–Ω—É—è —à–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç–∞
        from app.states.state_config import get_state_config
        from app.states.states import RequestCreationStates
        
        edit_config = get_state_config(RequestCreationStates.select_attribute_to_edit)
        attributes = edit_config.get("attributes", [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        attributes_text = edit_config.get("text", "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):") + "\n\n"
        for idx, attr in enumerate(attributes, 1):
            attributes_text += f"{idx}. {attr['display']}\n"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç–∞
        await state.set_state(RequestCreationStates.select_attribute_to_edit)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(edit_attributes=attributes)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        await callback.message.answer(
            attributes_text,
            reply_markup=edit_config.get("markup")
        )
        
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞—è–≤–∫–∏: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def restore_request_card(message: Message, state: FSMContext, bot: Bot):
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞—è–≤–∫–∏".
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î
        request_id = state_data.get("saved_request_id")
        if not request_id:
            app_logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞—è–≤–∫–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –∑–∞—è–≤–∫–∏'.")
            return
            
        request_data = await DBService.get_request_by_id_static(request_id)
        if not request_data:
            app_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ {request_id} –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –∑–∞—è–≤–∫–∏'.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        requests = await DBService.get_user_requests_static(state_data.get("user_id"))
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
        current_index = 0
        for i, req in enumerate(requests):
            if req["id"] == request_id:
                current_index = i
                break
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫
        await state.set_state(MyRequestStates.viewing_requests)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            user_requests=requests,
            current_index=current_index
        )
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await message.answer("–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_request_navigation_keyboard(request_data, current_index, len(requests))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∞
        matches_count = None
        if request_data.get("status") == "approved":
            matches_count = await DBService.get_matches_count_for_request(request_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏
        result = await send_request_card(
            bot=bot,
            chat_id=message.chat.id,
            request=request_data,
            keyboard=keyboard,
            show_status=True,
            matches_count=matches_count
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            keyboard_message_id=result.get("keyboard_message_id"),
            media_message_ids=result.get("media_message_ids", [])
        )
    
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –∑–∞—è–≤–∫–∏'.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –∑–∞—è–≤–∫–∏
@router.callback_query(MyRequestStates.viewing_requests, F.data == "current_my_request")
async def handle_current_my_request(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –∑–∞—è–≤–∫–∏.
    –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –º–µ—Ä—Ü–∞–ª–∞.
    """
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –∑–∞—è–≤–∫—É
@router.callback_query(MyRequestStates.viewing_requests, F.data.startswith("view_request_suppliers:"))
async def view_request_suppliers(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏—Ö—Å—è –Ω–∞ –∑–∞—è–≤–∫—É
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ callback_data
    request_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞—è–≤–∫—É
    suppliers = await DBService.get_suppliers_for_request(request_id)
    
    if not suppliers:
        await callback.message.answer("–ù–∞ –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        request_suppliers=suppliers,
        current_supplier_index=0,
        request_id=request_id
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
    await state.set_state(MyRequestStates.viewing_request_suppliers)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    current_index = 0
    supplier = suppliers[current_index]
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    state_data = await state.get_data()
    keyboard_message_id = state_data.get("keyboard_message_id")
    media_message_ids = state_data.get("media_message_ids", [])
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏
    try:
        for msg_id in media_message_ids:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
            except Exception as e:
                app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
        
        if keyboard_message_id and keyboard_message_id not in media_message_ids:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=keyboard_message_id)
            except Exception as e:
                app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π {keyboard_message_id}: {e}")
    except Exception as e:
        app_logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ—Ç–∫–ª–∏–∫–∞–º
    keyboard = create_supplier_response_keyboard(supplier, current_index, len(suppliers), request_id, can_write_review=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    from app.utils.message_utils import send_supplier_card
    result = await send_supplier_card(
        bot=bot,
        chat_id=callback.message.chat.id,
        supplier=supplier,
        keyboard=keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(
        keyboard_message_id=result.get("keyboard_message_id"),
        media_message_ids=result.get("media_message_ids", [])
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ—Ç–∫–ª–∏–∫–∞–º
def create_supplier_response_keyboard(supplier, current_index, total_count, request_id, can_write_review=False):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ—Ç–∫–ª–∏–∫–∞–º
    Args:
        supplier (dict): –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        current_index (int): –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ
        total_count (int): –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        request_id (int): ID –∑–∞—è–≤–∫–∏
        can_write_review (bool): –ú–æ–∂–Ω–æ –ª–∏ –ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation_row = [
        InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="prev_request_supplier"),
        InlineKeyboardButton(text=f"{current_index + 1}/{total_count}", callback_data="current_request_supplier"),
        InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="next_request_supplier")
    ]
    keyboard = []
    keyboard.append(navigation_row)
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤"
    if can_write_review:
        keyboard.append([
            InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"write_review:{supplier['id']}")
        ])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∑–∞—è–≤–∫–µ
    keyboard.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ", callback_data=f"back_to_request:{request_id}")
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫"
@router.callback_query(MyRequestStates.viewing_request_suppliers, F.data == "next_request_supplier")
async def next_request_supplier(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–∫–ª–∏–∫–æ–≤
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    suppliers = state_data.get("request_suppliers", [])
    current_index = state_data.get("current_supplier_index", 0)
    request_id = state_data.get("request_id")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å (—Å —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å—é)
    next_index = (current_index + 1) % len(suppliers)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    supplier = suppliers[next_index]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_supplier_index=next_index)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_supplier_response_keyboard(supplier, next_index, len(suppliers), request_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    keyboard_message_id = state_data.get("keyboard_message_id")
    media_message_ids = state_data.get("media_message_ids", [])
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    try:
        for msg_id in media_message_ids:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        
        if keyboard_message_id and keyboard_message_id not in media_message_ids:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=keyboard_message_id)
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    from app.utils.message_utils import send_supplier_card
    result = await send_supplier_card(
        bot=bot,
        chat_id=callback.message.chat.id,
        supplier=supplier,
        keyboard=keyboard
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        keyboard_message_id=result.get("keyboard_message_id"),
        media_message_ids=result.get("media_message_ids", [])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫"
@router.callback_query(MyRequestStates.viewing_request_suppliers, F.data == "prev_request_supplier")
async def prev_request_supplier(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–∫–ª–∏–∫–æ–≤
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    suppliers = state_data.get("request_suppliers", [])
    current_index = state_data.get("current_supplier_index", 0)
    request_id = state_data.get("request_id")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–µ–∫—Å (—Å —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å—é)
    prev_index = (current_index - 1) % len(suppliers)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    supplier = suppliers[prev_index]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_supplier_index=prev_index)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_supplier_response_keyboard(supplier, prev_index, len(suppliers), request_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    keyboard_message_id = state_data.get("keyboard_message_id")
    media_message_ids = state_data.get("media_message_ids", [])
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    try:
        for msg_id in media_message_ids:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        
        if keyboard_message_id and keyboard_message_id not in media_message_ids:
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=keyboard_message_id)
    except Exception as e:
        app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    from app.utils.message_utils import send_supplier_card
    result = await send_supplier_card(
        bot=bot,
        chat_id=callback.message.chat.id,
        supplier=supplier,
        keyboard=keyboard
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        keyboard_message_id=result.get("keyboard_message_id"),
        media_message_ids=result.get("media_message_ids", [])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ"
@router.callback_query(MyRequestStates.viewing_request_suppliers, F.data.startswith("back_to_request:"))
async def back_to_request(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞—è–≤–∫–∏
    """
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞—è–≤–∫–∏
    request_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    keyboard_message_id = state_data.get("keyboard_message_id")
    media_message_ids = state_data.get("media_message_ids", [])
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    try:
        for msg_id in media_message_ids:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
            except Exception as e:
                app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
        
        if keyboard_message_id and keyboard_message_id not in media_message_ids:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=keyboard_message_id)
            except Exception as e:
                app_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π {keyboard_message_id}: {e}")
    except Exception as e:
        app_logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    request_data = await DBService.get_request_by_id_static(request_id)
    if not request_data:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ")
        await state.set_state(MyRequestStates.viewing_requests)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_requests = await DBService.get_user_requests_static(callback.from_user.id)
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
    current_index = 0
    for i, req in enumerate(user_requests):
        if req["id"] == request_id:
            current_index = i
            break
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        user_requests=user_requests,
        current_index=current_index
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫
    await state.set_state(MyRequestStates.viewing_requests)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∑–∞—è–≤–∫–∞–º
    keyboard = create_request_navigation_keyboard(request_data, current_index, len(user_requests))
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –∑–∞—è–≤–∫—É
    matches_count = None
    if request_data.get("status") == "approved":
        matches_count = await DBService.get_matches_count_for_request(request_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏
    result = await send_request_card(
        bot=bot,
        chat_id=callback.message.chat.id,
        request=request_data,
        keyboard=keyboard,
        show_status=True,
        matches_count=matches_count
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        keyboard_message_id=result.get("keyboard_message_id"),
        media_message_ids=result.get("media_message_ids", [])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
@router.callback_query(MyRequestStates.viewing_request_suppliers, F.data == "current_request_supplier")
async def handle_current_request_supplier(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ –º–µ—Ä—Ü–∞–ª–∞.
    """
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
def register_handlers(dp):
    """Register all handlers from this module"""
    dp.include_router(router) 